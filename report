개요

1. TSP 알고리즘 분석
1.1 TSP 코드 리뷰
1.2 TSP BS와 DP 실행시간 분석 (n에 따른 그래프 및 빅 오 노테이션)
1.3 TSP BS bound 설정에 따른 성능 예상과 실제 구현
1.3.1 row
1.3.2 col
1.3.3 average

2. TSP 몬테카를로
1.1 몬테카를로의 정의
1.2 몬테카를로로 TSP 문제를 해결할 수 있는가 자체에 대한 문제
1.3 몬테카를로 분석
1.3.1 몬테카를로 Bound 자체에 몬테카를로를 넣는 경우
1.3.2 몬테카를로 Bound에 쓰레기 값을 이용하고, 노드를 임의로 enque 하는 경우
1.3.3 무엇이 더 실제와 비슷한가?

결론

개요

이 보고서에서 우리는 첫번째로 Traveling Salesman Person에 대한 Best Search 및 Dynamic Programing을 적용한 알고리즘을 Python을 이용하여 구현하고, 알고리즘의 연산 속도에 대해 논할 것입니다. 두번째로 몬테카를로 방법에 대하여 엄밀한 조사를 하고
몬테카를로 방법으로 두 알고리즘을 비교해 볼 것입니다.

1.1. TSP 코드 리뷰
- 본문 --> 파이썬 코드

1.2.
- 본문 --> n에 따른 그래프 첨부

1.3
현재 구현한 TSP의 Best Search 알고리즘은 bound로 나가는 값(row)를 이용하였을 때 입니다.
이 외에도 bound로는 들어오는 값(col)과 나가는 값과 들어오는 값의 평균을 이용할 수 있습니다.

예상:
들어오는 값(col)을 이용하였을 때, 결국에 각 노드에서의 bound값은 나가는 값(row)를 이용하였을 때와 차이가 없다.
엄밀하게 따져서 열을 기준으로 연산하게 되더라도, 결국에 이용하는 원소는 같기 때문이다.
또한, 들어오는 값과 나오는 값의 평균을 이용한다 하더라도, 결국에 어느 한 원소에서의 (들어오는 값 + 나가는 값) / 2의 값은,
그 앞의 원소의 나가는 값 / 2 부분과 그 뒤의 원소의 들어오는 값 / 2 부분으로 보충되기 때문에,
몇몇 산술적인 연산이 bound를 구할 때, 더 실행되는 것 이외에는 전체적인 bound와 노드 수에 큰 변화는 없을 것이다.
따라서 두 경우 모두 나가는 값을 이용한 연산에 비교하여 같은 노드, 큰 차이가 없는 실행 시간이어야 한다.

결과:
avarage의 경우 들어오는 값과 나가는 값의 최적값을 계산하여 평균하는 것이기 때문에 bound의 값은 항상
row로 구한 것보다 작게 된다. 따라서 더 많은 노드 연산이 필요하다.
실행시간 비교 결과 첨부

리뷰

2.1 몬테카를로의 정의
교과서 5장 3절을 참고하면 몬테카를로 알고리즘은 확률적 알고리즘의 한 종류이다. 이것은 다이나믹 프로그래밍 등의 확정적 알고리즘과는 다른 것이다.
교과서에서는 몬테카를로 분석을
1. 동일한 Promising 함수가 state space tree의 같은 레벨에 있는 모든 노드에 대해서 적용되어야 한다.
2. state space tree의 같은 레벨의 모든 노드는 같은 수의 자식을 가지고 있어야 한다.
일 경우에 적용가능하다고 했다.
(그렇다. TSP_BS는 적용가능함.)
또한 확률적 알고리즘이란 난수를 발생시켜 진행과정을 결정하는 알고리즘이다.
위의 예제에서 확률적 알고리즘은 언제나 옳은 결과를 내놓지만 실행시간이 오래 걸릴 확률이 약간이나마 존재한다.
어떤 경우에는 '오류가 발생할 확률이 어느 정도 존재하더라도' 알고리즘이 빠르게 실행되는 것을 원할 경우도 있다.
앞의 경우를 라스베가스 알고리즘이라고 하며, 뒤의 경우를 몬테카를로 알고리즘이라고 한다.
(몬테카를로 알고리즘은 시뮬레이션에서 사용하는 몬테카를로 방법에서 이름을 따왔다).
모든 라스베가스 알고리즘은 다음과 같은 방법으로 몬테카를로 알고리즘으로 변형할 수 있다.
즉, 몬테카를로 알고리즘은 제한된 시간 내에 가장 근접한 정답을 내놓는 것을 목적으로한다.
2.2 몬테카를로로 TSP 자체를 해결 가능한가?
그렇다면, 이번 숙제와는 약간 상관성이 떨어질 수 있으나, 추가적인 탐구를 해보자.
몬테카를로 알고리즘을 이용하여 TSP의 복잡도를 분석하는 것이아니라, TSP 자체를 몬테카를로를 이용하는 것은 어떠한가?
우리는 TSP의 DP버전이 n2^n, BS버전이 2^n/2라는 사실을 알고 있다.
즉, n이 커질 수록 exponential 하게 증가하므로, 대부분의 컴퓨터에서 큰 값을 연산하기에 큰 어려움을 가진다.
이러한 문제를 몬테카를로 알고리즘을 이용하여 해결하여 보자.
몬테카를로 분석과 동일하게 알고리즘은 bound값을 기반으로 랜덤하게 같은 레벨에서 발생한 노드를 선택적으로만 enque한다.
그렇게 한 결과로 실행시간은 극적으로 개선되며, 답이 최적이라고 할 수는 없지만, (최적인 답을 찾으려면 실행시간은 점점 증가한다.)
어느정도 정확한 답과 비교했을때, 쓰기에 무리가 없는 결과를 내려준다.

3. 무한대와 연산속도?

참고
------ 일반적으로 웹상의 자료는 신빙성이 이쩌구...
http://yjhyjh.egloos.com/m/33072
https://ko.wikipedia.org/wiki/%EB%AA%AC%ED%85%8C%EC%B9%B4%EB%A5%BC%EB%A1%9C
https://ko.wikipedia.org/wiki/%EB%AA%AC%ED%85%8C%EC%B9%B4%EB%A5%BC%EB%A1%9C_%EB%B0%A9%EB%B2%95
https://namu.wiki/w/%EB%AA%AC%ED%85%8C%20%EC%B9%B4%EB%A5%BC%EB%A1%9C%20%EB%B0%A9%EB%B2%95
https://namu.wiki/w/%EB%AA%AC%ED%85%8C%20%EC%B9%B4%EB%A5%BC%EB%A1%9C
https://ko.wikipedia.org/wiki/%ED%99%95%EB%A5%A0%EC%A0%81_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98
http://www.dimitrismallis.eu/TSP.html
교과서

연산자료
--------인풋 15일떄---------
C:\Users\jinho\AppData\Local\Programs\Python\Python36\python.exe C:/Users/jinho/PycharmProjects/homework2/compare_TSP.py
the min length is : 30
the optimal path is :  [1, 4, 5, 2, 3, 1]
the min_length is :  30
the optimal path is :  [1, 4, 5, 2, 3, 1]
the min_length is :  30
tot node:  9
Above is test case!---------------------------------------
What is your wnat size of matrix? 15
The number of execution? 10
the min length is : 1.072365148424971
the optimal path is :  [1, 8, 2, 12, 4, 10, 11, 7, 13, 5, 14, 15, 6, 3, 9, 1]
the min_length is :  1.072365148424971
the optimal path is :  [1, 8, 2, 12, 4, 10, 11, 7, 13, 5, 14, 15, 6, 3, 9, 1]
the min_length is :  1.072365148424971
tot node:  633
the min length is : 1.8919225774518804
the optimal path is :  [1, 7, 13, 12, 10, 5, 8, 6, 4, 3, 9, 11, 2, 14, 15, 1]
the min_length is :  1.8919225774518802
the optimal path is :  [1, 7, 13, 12, 10, 5, 8, 6, 4, 3, 9, 11, 2, 14, 15, 1]
the min_length is :  1.8919225774518802
tot node:  35070
the min length is : 1.7394899666245522
the optimal path is :  [1, 10, 3, 11, 13, 5, 7, 2, 4, 12, 6, 15, 9, 8, 14, 1]
the min_length is :  1.7394899666245522
the optimal path is :  [1, 10, 3, 11, 13, 5, 7, 2, 4, 12, 6, 15, 9, 8, 14, 1]
the min_length is :  1.7394899666245522
tot node:  24441
the min length is : 1.9127898377203423
the optimal path is :  [1, 8, 9, 7, 14, 10, 11, 4, 6, 2, 15, 12, 3, 5, 13, 1]
the min_length is :  1.9127898377203425
the optimal path is :  [1, 8, 9, 7, 14, 10, 11, 4, 6, 2, 15, 12, 3, 5, 13, 1]
the min_length is :  1.9127898377203425
tot node:  4929
the min length is : 1.4498650841818144
the optimal path is :  [1, 2, 14, 13, 11, 8, 4, 5, 10, 12, 3, 7, 15, 6, 9, 1]
the min_length is :  1.4498650841818144
the optimal path is :  [1, 2, 14, 13, 11, 8, 4, 5, 10, 12, 3, 7, 15, 6, 9, 1]
the min_length is :  1.4498650841818144
tot node:  7706
the min length is : 2.0649148421726573
the optimal path is :  [1, 6, 3, 8, 5, 14, 11, 2, 4, 13, 10, 12, 7, 15, 9, 1]
the min_length is :  2.064914842172657
the optimal path is :  [1, 6, 3, 8, 5, 14, 11, 2, 4, 13, 10, 12, 7, 15, 9, 1]
the min_length is :  2.064914842172657
tot node:  5223
the min length is : 1.2109180387673795
the optimal path is :  [1, 12, 2, 8, 15, 4, 5, 14, 6, 3, 13, 9, 7, 11, 10, 1]
the min_length is :  1.2109180387673795
the optimal path is :  [1, 12, 2, 8, 15, 4, 5, 14, 6, 3, 13, 9, 7, 11, 10, 1]
the min_length is :  1.2109180387673795
tot node:  8099
the min length is : 1.5472876098062787
the optimal path is :  [1, 8, 15, 12, 2, 3, 10, 6, 13, 7, 11, 5, 9, 14, 4, 1]
the min_length is :  1.5472876098062787
the optimal path is :  [1, 8, 15, 12, 2, 3, 10, 6, 13, 7, 11, 5, 9, 14, 4, 1]
the min_length is :  1.5472876098062787
tot node:  6719
the min length is : 1.891429839347264
the optimal path is :  [1, 5, 10, 7, 2, 14, 9, 3, 8, 12, 13, 6, 11, 4, 15, 1]
the min_length is :  1.8914298393472637
the optimal path is :  [1, 5, 10, 7, 2, 14, 9, 3, 8, 12, 13, 6, 11, 4, 15, 1]
the min_length is :  1.8914298393472637
tot node:  16929
the min length is : 1.3344087237313431
the optimal path is :  [1, 8, 12, 6, 10, 4, 13, 14, 9, 15, 7, 2, 5, 3, 11, 1]
the min_length is :  1.3344087237313431
the optimal path is :  [1, 8, 12, 6, 10, 4, 13, 14, 9, 15, 7, 2, 5, 3, 11, 1]
the min_length is :  1.3344087237313431
tot node:  2529
DP average :  10.16527545452118
BS average :  1.0673390865325927
BS_avg average:  1.687048649787903
BS node average :  10936.1

Process finished with exit code 0

C:\Users\jinho\AppData\Local\Programs\Python\Python36\python.exe C:/Users/jinho/PycharmProjects/homework2/monte_TSP_BS.py
CAUTION!
if your computer is not a super computer, "now testing" is very long time required.

What size matrix(n x n) you wnat? 15
How much do you want perform? 10
average node: 8510.6

Process finished with exit code 0
---------인풋10일때------------------------------

C:\Users\jinho\AppData\Local\Programs\Python\Python36\python.exe C:/Users/jinho/PycharmProjects/homework2/compare_TSP.py
the min length is : 30
the optimal path is :  [1, 4, 5, 2, 3, 1]
the min_length is :  30
the optimal path is :  [1, 4, 5, 2, 3, 1]
the min_length is :  30
tot node:  9
Above is test case!---------------------------------------
What is your wnat size of matrix? 10
The number of execution? 10
the min length is : 1.7276192860469823
the optimal path is :  [1, 2, 5, 10, 6, 7, 9, 3, 8, 4, 1]
the min_length is :  1.7276192860469823
the optimal path is :  [1, 2, 5, 10, 6, 7, 9, 3, 8, 4, 1]
the min_length is :  1.7276192860469823
tot node:  475
the min length is : 1.6389953711966636
the optimal path is :  [1, 4, 2, 3, 8, 7, 10, 9, 6, 5, 1]
the min_length is :  1.6389953711966636
the optimal path is :  [1, 4, 2, 3, 8, 7, 10, 9, 6, 5, 1]
the min_length is :  1.6389953711966636
tot node:  240
the min length is : 1.6225420721642494
the optimal path is :  [1, 5, 2, 7, 3, 8, 9, 6, 4, 10, 1]
the min_length is :  1.6225420721642494
the optimal path is :  [1, 5, 2, 7, 3, 8, 9, 6, 4, 10, 1]
the min_length is :  1.6225420721642494
tot node:  352
the min length is : 0.9531146596931187
the optimal path is :  [1, 5, 8, 3, 9, 7, 10, 2, 4, 6, 1]
the min_length is :  0.9531146596931187
the optimal path is :  [1, 5, 8, 3, 9, 7, 10, 2, 4, 6, 1]
the min_length is :  0.9531146596931187
tot node:  64
the min length is : 1.3559456126102583
the optimal path is :  [1, 4, 7, 6, 5, 9, 3, 2, 8, 10, 1]
the min_length is :  1.355945612610258
the optimal path is :  [1, 4, 7, 6, 5, 9, 3, 2, 8, 10, 1]
the min_length is :  1.355945612610258
tot node:  682
the min length is : 1.0184040922257425
the optimal path is :  [1, 8, 4, 5, 7, 3, 10, 9, 2, 6, 1]
the min_length is :  1.0184040922257425
the optimal path is :  [1, 8, 4, 5, 7, 3, 10, 9, 2, 6, 1]
the min_length is :  1.0184040922257425
tot node:  82
the min length is : 1.9889162722425475
the optimal path is :  [1, 8, 3, 5, 6, 2, 7, 4, 10, 9, 1]
the min_length is :  1.9889162722425477
the optimal path is :  [1, 8, 3, 5, 6, 2, 7, 4, 10, 9, 1]
the min_length is :  1.9889162722425477
tot node:  1036
the min length is : 1.416186697448956
the optimal path is :  [1, 9, 5, 3, 6, 4, 8, 7, 2, 10, 1]
the min_length is :  1.416186697448956
the optimal path is :  [1, 9, 5, 3, 6, 4, 8, 7, 2, 10, 1]
the min_length is :  1.416186697448956
tot node:  562
the min length is : 1.634618308624769
the optimal path is :  [1, 4, 9, 6, 2, 5, 7, 8, 10, 3, 1]
the min_length is :  1.634618308624769
the optimal path is :  [1, 4, 9, 6, 2, 5, 7, 8, 10, 3, 1]
the min_length is :  1.634618308624769
tot node:  449
the min length is : 1.6257948718118245
the optimal path is :  [1, 9, 3, 2, 10, 8, 6, 7, 5, 4, 1]
the min_length is :  1.625794871811825
the optimal path is :  [1, 9, 3, 2, 10, 8, 6, 7, 5, 4, 1]
the min_length is :  1.625794871811825
tot node:  427
DP average :  0.08282234668731689
BS average :  0.02500927448272705
BS_avg average:  0.039141607284545896
BS node average :  375.3

Process finished with exit code 0

C:\Users\jinho\AppData\Local\Programs\Python\Python36\python.exe C:/Users/jinho/PycharmProjects/homework2/monte_TSP_BS.py
CAUTION!
if your computer is not a super computer, "now testing" is very long time required.

What size matrix(n x n) you wnat? 10
How much do you want perform? 10
average node: 296.0

Process finished with exit code 0

--------------------인풋5일때--------

C:\Users\jinho\AppData\Local\Programs\Python\Python36\python.exe C:/Users/jinho/PycharmProjects/homework2/compare_TSP.py
the min length is : 30
the optimal path is :  [1, 4, 5, 2, 3, 1]
the min_length is :  30
the optimal path is :  [1, 4, 5, 2, 3, 1]
the min_length is :  30
tot node:  9
Above is test case!---------------------------------------
What is your wnat size of matrix? 5
The number of execution? 10
the min length is : 2.4476333972311135
the optimal path is :  [1, 2, 4, 3, 5, 1]
the min_length is :  2.4476333972311135
the optimal path is :  [1, 2, 4, 3, 5, 1]
the min_length is :  2.4476333972311135
tot node:  11
the min length is : 1.5505316642756566
the optimal path is :  [1, 2, 5, 3, 4, 1]
the min_length is :  1.5505316642756566
the optimal path is :  [1, 2, 5, 3, 4, 1]
the min_length is :  1.5505316642756566
tot node:  14
the min length is : 1.576822671757589
the optimal path is :  [1, 4, 5, 3, 2, 1]
the min_length is :  1.576822671757589
the optimal path is :  [1, 4, 5, 3, 2, 1]
the min_length is :  1.576822671757589
tot node:  8
the min length is : 0.656950966446425
the optimal path is :  [1, 2, 4, 5, 3, 1]
the min_length is :  0.656950966446425
the optimal path is :  [1, 2, 4, 5, 3, 1]
the min_length is :  0.656950966446425
tot node:  8
the min length is : 1.3011454983102
the optimal path is :  [1, 5, 2, 3, 4, 1]
the min_length is :  1.3011454983102
the optimal path is :  [1, 5, 2, 3, 4, 1]
the min_length is :  1.3011454983102
tot node:  8
the min length is : 1.0416157675378486
the optimal path is :  [1, 3, 5, 2, 4, 1]
the min_length is :  1.0416157675378486
the optimal path is :  [1, 3, 5, 2, 4, 1]
the min_length is :  1.0416157675378486
tot node:  11
the min length is : 1.4410120766174856
the optimal path is :  [1, 4, 5, 3, 2, 1]
the min_length is :  1.4410120766174854
the optimal path is :  [1, 4, 5, 3, 2, 1]
the min_length is :  1.4410120766174854
tot node:  11
the min length is : 1.1954020575283941
the optimal path is :  [1, 5, 3, 4, 2, 1]
the min_length is :  1.1954020575283943
the optimal path is :  [1, 5, 3, 4, 2, 1]
the min_length is :  1.1954020575283943
tot node:  11
the min length is : 1.551257868466436
the optimal path is :  [1, 2, 4, 3, 5, 1]
the min_length is :  1.5512578684664358
the optimal path is :  [1, 2, 4, 3, 5, 1]
the min_length is :  1.5512578684664358
tot node:  10
the min length is : 2.020036585038732
the optimal path is :  [1, 3, 5, 2, 4, 1]
the min_length is :  2.020036585038732
the optimal path is :  [1, 3, 5, 2, 4, 1]
the min_length is :  2.020036585038732
tot node:  12
DP average :  0.001558375358581543
BS average :  0.0
BS_avg average:  0.0
BS node average :  9.7

Process finished with exit code 0

C:\Users\jinho\AppData\Local\Programs\Python\Python36\python.exe C:/Users/jinho/PycharmProjects/homework2/monte_TSP_BS.py
CAUTION!
if your computer is not a super computer, "now testing" is very long time required.

What size matrix(n x n) you wnat? 5
How much do you want perform? 10
average node: 10.5

Process finished with exit code 0

---------20

C:\Users\jinho\AppData\Local\Programs\Python\Python36\python.exe C:/Users/jinho/PycharmProjects/homework2/monte2.py
CAUTION!
if your computer is not a super computer, "now testing" is very long time required.

What size matrix(n x n) you wnat? 20
How much do you want perform? 10
0 done
1 done
2 done
3 done
4 done
5 done
6 done
7 done
8 done
9 done
average node: 131953.9

Process finished with exit code 0
C:\Users\jinho\AppData\Local\Programs\Python\Python36\python.exe C:/Users/jinho/PycharmProjects/homework2/monte2.py
CAUTION!
if your computer is not a super computer, "now testing" is very long time required.

What size matrix(n x n) you wnat? 20
How much do you want perform? 20
0 done
1 done
2 done
3 done
4 done
5 done
6 done
7 done
8 done
9 done
10 done
11 done
12 done
13 done
14 done
15 done
16 done
17 done
18 done
19 done
average node: 227583.3

Process finished with exit code 0
