개요

1. TSP 알고리즘 분석
1.1 TSP 코드 리뷰
1.2 TSP BS와 DP 실행시간 분석 (n에 따른 그래프 및 빅 오 노테이션)
1.3 TSP BS bound 설정에 따른 성능 예상과 실제 구현
1.3.1 row
1.3.2 col
1.3.3 average

2. TSP 몬테카를로
1.1 몬테카를로의 정의
1.2 몬테카를로로 TSP 문제를 해결할 수 있는가 자체에 대한 문제
1.3 몬테카를로 분석
1.3.1 몬테카를로 Bound 자체에 몬테카를로를 넣는 경우
1.3.2 몬테카를로 Bound에 쓰레기 값을 이용하고, 노드를 임의로 enque 하는 경우
1.3.3 무엇이 더 실제와 비슷한가?

결론

개요

이 보고서에서 우리는 첫번째로 Traveling Salesman Person에 대한 Best Search 및 Dynamic Programing을 적용한 알고리즘을 Python을 이용하여 구현하고, 알고리즘의 연산 속도에 대해 논할 것입니다. 두번째로 몬테카를로 방법에 대하여 엄밀한 조사를 하고
몬테카를로 방법으로 두 알고리즘을 비교해 볼 것입니다.

1.1. TSP 코드 리뷰
- 본문 --> 파이썬 코드

1.2.
- 본문 --> n에 따른 그래프 첨부

1.3
현재 구현한 TSP의 Best Search 알고리즘은 bound로 나가는 값(row)를 이용하였을 때 입니다.
이 외에도 bound로는 들어오는 값(col)과 나가는 값과 들어오는 값의 평균을 이용할 수 있습니다.

예상:
들어오는 값(col)을 이용하였을 때, 결국에 각 노드에서의 bound값은 나가는 값(row)를 이용하였을 때와 차이가 없다.
엄밀하게 따져서 열을 기준으로 연산하게 되더라도, 결국에 이용하는 원소는 같기 때문이다.
또한, 들어오는 값과 나오는 값의 평균을 이용한다 하더라도, 결국에 어느 한 원소에서의 (들어오는 값 + 나가는 값) / 2의 값은,
그 앞의 원소의 나가는 값 / 2 부분과 그 뒤의 원소의 들어오는 값 / 2 부분으로 보충되기 때문에,
몇몇 산술적인 연산이 bound를 구할 때, 더 실행되는 것 이외에는 전체적인 bound와 노드 수에 큰 변화는 없을 것이다.
따라서 두 경우 모두 나가는 값을 이용한 연산에 비교하여 같은 노드, 큰 차이가 없는 실행 시간이어야 한다.

결과:
avarage의 경우 들어오는 값과 나가는 값의 최적값을 계산하여 평균하는 것이기 때문에 bound의 값은 항상
row로 구한 것보다 작게 된다. 따라서 더 많은 노드 연산이 필요하다.
실행시간 비교 결과 첨부

리뷰

2.1 몬테카를로의 정의
2.2 몬테카를로로 TSP 자체를 해결 가능한가?

3. 무한대와 연산속도?
